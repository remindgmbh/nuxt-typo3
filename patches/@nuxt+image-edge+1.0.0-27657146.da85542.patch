# use mobileFirst approach until this pr is merged: https://github.com/nuxt/image/pull/482
diff --git a/node_modules/@nuxt/image-edge/dist/runtime/image.mjs b/node_modules/@nuxt/image-edge/dist/runtime/image.mjs
index 4aaf90e..fe261c9 100644
--- a/node_modules/@nuxt/image-edge/dist/runtime/image.mjs
+++ b/node_modules/@nuxt/image-edge/dist/runtime/image.mjs
@@ -108,7 +108,7 @@ function getSizes(ctx, input, opts) {
     Object.assign(sizes, opts.sizes);
   }
   for (const key in sizes) {
-    const screenMaxWidth = ctx.options.screens && ctx.options.screens[key] || parseInt(key);
+    const screenWidth = ctx.options.screens && ctx.options.screens[key] || parseInt(key);
     let size = String(sizes[key]);
     const isFluid = size.endsWith("vw");
     if (!isFluid && /^\d+$/.test(size)) {
@@ -118,22 +118,22 @@ function getSizes(ctx, input, opts) {
       continue;
     }
     let _cWidth = parseInt(size);
-    if (!screenMaxWidth || !_cWidth) {
+    if (!screenWidth || !_cWidth) {
       continue;
     }
     if (isFluid) {
-      _cWidth = Math.round(_cWidth / 100 * screenMaxWidth);
+      _cWidth = Math.round(_cWidth / 100 * screenWidth);
     }
     const _cHeight = hwRatio ? Math.round(_cWidth * hwRatio) : height;
     variants.push({
       width: _cWidth,
       size,
-      screenMaxWidth,
-      media: `(max-width: ${screenMaxWidth}px)`,
+      screenWidth,
+      media: `(min-width: ${screenWidth}px)`,
       src: ctx.$img(input, { ...opts.modifiers, width: _cWidth, height: _cHeight }, opts)
     });
   }
-  variants.sort((v1, v2) => v1.screenMaxWidth - v2.screenMaxWidth);
+  variants.sort((v1, v2) => v2.screenWidth - v1.screenWidth);
   const defaultVar = variants[variants.length - 1];
   if (defaultVar) {
     defaultVar.media = "";
